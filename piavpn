#!/bin/bash

#############################
# Set the following variables
#############################

ID_FILE="user.txt"
VPN_CONF_DIR="/home/pi/vpn"
CONFIG_FILE="current.conf"
ADD_FLAGS="--script-security 2 --up '$VPN_CONF_DIR/update-resolv-conf' --down '$VPN_CONF_DIR/update-resolv-conf'"

### Functions start here

check_openvpn_running()
{
  VPN_CHECK=`ps -eaf | grep openvpn | grep -v grep | wc -l `
  if [ $VPN_CHECK -ne 0 ]; then 
    PROC_ID=`pgrep openvpn` 
  else
    PROC_ID=0
  fi
}

start_openvpn()
{
  openvpn --cd $VPN_CONF_DIR --config current.conf --auth-user-pass $ID_FILE --keepalive 10 60 --auth-nocache --daemon $ADD_FLAGS
}

stop_openvpn()
{
  killall openvpn
}
  
list_config_files()
{
  OIFS=$IFS
  IFS=$'\n'
  local COUNT=1
  echo "Avaliable Config files are listed below"
  for file in `find $VPN_CONF_DIR -type f -name "*.ovpn" | sort ` 
  do 
    filename=$(basename $file)
    echo $COUNT $filename 
    COUNT=`expr $COUNT + 1`
  done
  IFS=$OIFS
}

list_current_config()
{
  CURRENT_CONFIG=`ls -l $VPN_CONF_DIR | grep current.conf | awk '{print $11}' | cut -d / -f5 ` 
  echo "The current config file is: " $CURRENT_CONFIG
}

check_if_sudo()
{
  if [[ $EUID -ne 0 ]]; then
    echo "This script needs sudo.  Try sudo piavpn <args> "
    exit 1
fi
}

display_help()
{
cat <<EOF

Usage sudo $0 <args> 
Args : start|stop|list|change|status

start	Connect to PIA
stop	Disconnect from PIA
list	List all PIA config files
change	Select a new PIA server
status	See if you are connected to PIA

EOF
}

change_vpn_server()
{
  OIFS=$IFS
  IFS=$'\n'
  local COUNT=0

  files=($(find $VPN_CONF_DIR -type f -name "*.ovpn" | sort ))
  for item in ${files[*]}
  do
    printf $COUNT
    printf "  "
    echo $item | cut -d / -f5
    COUNT=`expr $COUNT + 1`
  done

  echo "Select the file you wish to use, followed by [ENTER]: "

  read SELECTED_FILE

  NEW_CURRENT=${files[$SELECTED_FILE]}

  echo $NEW_CURRENT

  rm $VPN_CONF_DIR/current.conf
  ln -s $NEW_CURRENT $VPN_CONF_DIR/current.conf

  IFS=$OIFS

}


#### Main script

check_if_sudo

if [ $# -eq 0 ]
then
  display_help
  exit
fi

case "$1" in 

start)	check_openvpn_running 

	if [ $PROC_ID -ne "0" ]; then
  	  echo "OpenVpn is already running.  Process ID is: " $PROC_ID
  	  exit 1
	else
  	  echo "Starting OpenVPN"
          start_openvpn
	fi
	;;

stop)	check_openvpn_running	
	if [ $PROC_ID -eq 0 ]; then
  	  echo "OpenVPN is not running."
	  exit 1
	else
	  echo "Shutting down OpenVPN"
	  stop_openvpn
	fi
	;;	  

list)	list_config_files
	list_current_config
	;;

change) change_vpn_server
	;;

status)  check_openvpn_running

	if [ $PROC_ID -ne "0" ]; then
  	  echo "OpenVpn is running.  Process ID is: " $PROC_ID
	else
  	  echo "OpenVPN is not running.  No process found"
	fi
	;;

*)	echo "Not a valid argument"
	display_help
	;;
esac	

